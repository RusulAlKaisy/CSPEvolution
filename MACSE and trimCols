#Let's run MACSE on that 
system("java -jar ~C:\\Users\\HomePC\\Downloads\\macse\\macse_v2.03.jar -prog alignSequences -max_refine_iter 0 -seq NewSequencesFasta.fasta -out_NT NewSequencesFasta_nucleotide_macse_NT.fasta -out_AA NewSequences_amino_macse_AA.fasta")

#Removing gaps and columns

system("java -jar ~/Desktop/Software/macse_v2.03.jar -prog exportAlignment -align NewSequencesFasta_nucleotide_macse_NT.fasta -codonForInternalStop NNN -codonForFinalStop --- -codonForInternalFS --- -charForRemainingFS - -out_NT NewSequences_alignment_macse_NT.fasta -out_AA NewSequences_alignment_macse_AA.fasta")

#After having removed the gaps and codons we can use the trimCols function

setwd("C:/Users/HomePC/Desktop")

source("trimCols.R")
NewSequencesFasta_alignment<-read.FASTA("C:\\Users\\HomePC\\Desktop\\Dataset1\\MACSE\\NewSequences_alignment_macse_NT.fasta")

#Create a matrix
NewSequencesAlignment_matrix<-as.matrix(NewSequencesFasta_alignment)

#Now filter the remaining gaps using trimCols 
NewSequencesFasta_trimCols<-trimCols(NewSequencesAlignment_matrix,prop=0.8,codon=T)
#The function:
trimCols.R<-function(al,prop,codon=T){
  mat<-as.character(as.matrix(al))
  ntax<-nrow(mat)
  ntax
  propthres<-1-prop
  compliantSites<-apply(mat,2,function(x){
    x<-as.character(x)
    compl<-(length(which(x %in% c("N","n","?","-","O","o","X","x")))/ntax)< propthres
    return(compl)
  })
  
  if(codon){
    codIDs<-rep(1:(length(compliantSites)/3),each=3)
    codsToKeep<-rep(F,length(compliantSites))
    for(i in 1:max(codIDs)){
      if(all(compliantSites[which(codIDs==i)]))codsToKeep[which(codIDs==i)]<-T
      
    }
    al<-al[,as.logical(codsToKeep)] 
    return(al)
    
  }else{
    al<-al[, as.logical(compliantSites)]
    return(al)
  }

#Save it as a FASTA file 
write.FASTA(NewSequencesFasta_trimCols,"C:\\Users\\HomePC\\Desktop\\Dataset1\\NewSequencesFasta_trimcols.fasta")

setwd("C:\\Users\\HomePC\\Desktop\\Dataset1")

NewSequencesFastaTrim<-read.FASTA("NewSequencesFasta_trimcols.fasta")
